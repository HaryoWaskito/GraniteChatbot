@{
    ViewData["Title"] = "Granite AI Chatbot";
}

<style>
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        margin: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        height: 100vh;
    }

    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        height: 100vh;
        display: flex;
        flex-direction: column;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 0 0 20px 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    }

    .chat-header {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        padding: 20px;
        text-align: center;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .chat-header h1 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }

    .powered-by {
        font-size: 0.9rem;
        opacity: 0.9;
        margin-top: 5px;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background: rgba(248, 249, 250, 0.8);
    }

    .message {
        margin-bottom: 15px;
        display: flex;
        align-items: flex-start;
    }

    .message.user {
        justify-content: flex-end;
    }

    .message.bot {
        justify-content: flex-start;
    }

    .message-bubble {
        max-width: 70%;
        padding: 12px 18px;
        border-radius: 20px;
        word-wrap: break-word;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .message.user .message-bubble {
        background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        color: white;
        border-bottom-right-radius: 5px;
    }

    .message.bot .message-bubble {
        background: linear-gradient(135deg, #74b9ff, #0984e3);
        color: white;
        border-bottom-left-radius: 5px;
    }

    .chat-input-container {
        padding: 20px;
        background: white;
        border-top: 1px solid #e9ecef;
    }

    .chat-input-wrapper {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .chat-input {
        flex: 1;
        padding: 15px 20px;
        border: 2px solid #e9ecef;
        border-radius: 50px;
        font-size: 16px;
        outline: none;
        transition: all 0.3s ease;
    }

    .chat-input:focus {
        border-color: #4facfe;
        box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
    }

    .send-button {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        border: none;
        border-radius: 50px;
        padding: 15px 25px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
    }

    .send-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(79, 172, 254, 0.4);
    }

    .send-button:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    .typing-indicator {
        display: none;
        padding: 10px 20px;
        font-style: italic;
        color: #6c757d;
    }

    .loading-dots {
        display: inline-block;
    }

    .loading-dots::after {
        content: '';
        animation: dots 2s infinite;
    }

    @@keyframes dots {
        0%, 20% { content: ''; }
        40% { content: '.'; }
        60% { content: '..'; }
        80%, 100% { content: '...'; }
    }

    @@media (max-width: 768px) {
        .chat-container {
            border-radius: 0;
            height: 100vh;
        }
        
        .message-bubble {
            max-width: 85%;
        }
    }
</style>

<div class="chat-container">
    <div class="chat-header">
        <h1>🤖 AI Chatbot</h1>
        <div class="powered-by">Powered by IBM Granite Model</div>
    </div>
    
    <div class="chat-messages" id="chatMessages">
        <div class="message bot">
            <div class="message-bubble">
                👋 Hello! I'm your AI assistant powered by IBM Granite. How can I help you today?
            </div>
        </div>
    </div>
    
    <div class="typing-indicator" id="typingIndicator">
        <span class="loading-dots">AI is thinking</span>
    </div>
    
    <div class="chat-input-container">
        <div class="chat-input-wrapper">
            <input type="text" 
                   id="messageInput" 
                   class="chat-input" 
                   placeholder="Type your message here..." 
                   maxlength="1000">
            <button id="sendButton" class="send-button">
                Send 🚀
            </button>
        </div>
    </div>
</div>

<script>
    const chatMessages = document.getElementById('chatMessages');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const typingIndicator = document.getElementById('typingIndicator');

    // Send message when Enter is pressed
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // Send message when button is clicked
    sendButton.addEventListener('click', sendMessage);

    function addMessage(message, isUser = false) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isUser ? 'user' : 'bot'}`;
        
        const bubbleDiv = document.createElement('div');
        bubbleDiv.className = 'message-bubble';
        bubbleDiv.textContent = message;
        
        messageDiv.appendChild(bubbleDiv);
        chatMessages.appendChild(messageDiv);
        
        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showTyping() {
        typingIndicator.style.display = 'block';
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function hideTyping() {
        typingIndicator.style.display = 'none';
    }

    async function sendMessage() {
        const message = messageInput.value.trim();
        if (!message) return;

        // Disable input while processing
        messageInput.disabled = true;
        sendButton.disabled = true;

        // Add user message
        addMessage(message, true);
        
        // Clear input
        messageInput.value = '';

        // Show typing indicator
        showTyping();

        try {
            const response = await fetch('/Home/Chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ message: message })
            });

            const data = await response.json();
            
            // Hide typing indicator
            hideTyping();

            if (data.success) {
                addMessage(data.response);
            } else {
                addMessage('Sorry, I encountered an error. Please try again.');
            }
        } catch (error) {
            hideTyping();
            addMessage('Sorry, I encountered a connection error. Please try again.');
        } finally {
            // Re-enable input
            messageInput.disabled = false;
            sendButton.disabled = false;
            messageInput.focus();
        }
    }

    // Focus input on page load
    messageInput.focus();
</script>